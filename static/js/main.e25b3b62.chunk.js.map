{"version":3,"sources":["recoil/atoms.js","components/Location/index.js","components/Location/Location.jsx","service/index.js","recoil/selectors.js","components/LocationList/index.js","components/LocationList/LocationList.jsx","components/Loading/index.js","components/Loading/Loading.jsx","components/MapView/index.js","components/MapView/MapView.jsx","components/SearchLocation/SearchLocation.jsx","components/SearchLocation/index.js","components/CurrentCity/index.js","components/CurrentCity/CurrentCity.jsx","components/SelectLocationCount/SelectLocationCount.jsx","components/SelectLocationCount/index.js","App.js","serviceWorker.js","index.js"],"names":["locationCountState","atom","key","default","selectedLocationState","mapCenterState","mapZoomState","Location","coordinates","id","city","setselectedLocationState","useSetRecoilState","CircleMarker","center","lat","lng","radius","properties","color","onMouseOver","event","target","setStyle","options","onMouseOut","generateLocations","count","Promise","resolve","setTimeout","places","i","placeObject","faker","address","latitude","longitude","push","locationsQuery","selector","get","a","LocationList","useRecoilValue","map","location","Loader","className","size","MapView","zoomState","centerState","Map","zoom","style","height","width","TileLayer","attribution","url","fallback","theme","container","position","input","padding","fontWeight","fontSize","border","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","inputFocused","outline","inputOpen","suggestionsContainer","display","suggestionsContainerOpen","maxHeight","overflow","top","backgroundColor","borderWidth","borderColor","borderTop","zIndex","suggestionsList","margin","listStyleType","suggestion","cursor","suggestionHighlighted","SearchLocation","useRecoilValueLoadable","state","contents","useState","value","setValue","suggestions","setSuggestions","setZoomState","setCenterState","setselectedLocation","inputProps","placeholder","onChange","newValue","getSuggestions","inputValue","trim","toLowerCase","inputLength","length","filter","content","slice","renderSuggestion","onSuggestionsFetchRequested","onSuggestionSelected","suggestionValue","suggestionIndex","sectionIndex","method","onSuggestionsClearRequested","getSuggestionValue","CurrentCity","LOCATION_COUNT_OPTIONS","label","SelectLocationCount","setNumberOfLocation","defaultValue","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e25b3b62.chunk.js","sourcesContent":["import { atom } from 'recoil';\n\n// Location states\nexport const locationCountState = atom({\n  key: 'locationCountState',\n  default: 1000,\n});\n\nexport const selectedLocationState = atom({\n  key: 'selectedLocationState',\n  default: null,\n});\n\n// Leaflet map states\nexport const mapCenterState = atom({\n  key: 'mapCenterState',\n  default: [19, 41],\n});\n\nexport const mapZoomState = atom({\n  key: 'maZoomState',\n  default: 2,\n});\n","import Location from './Location';\n\nexport default Location;\n","import React from 'react';\nimport { CircleMarker } from 'react-leaflet';\nimport { useSetRecoilState } from 'recoil';\nimport { selectedLocationState } from '../../recoil/atoms';\n\nexport default function Location({ coordinates, id, city }) {\n  const setselectedLocationState = useSetRecoilState(selectedLocationState);\n\n  const onLocationOver = (event) => {\n    event.target.setStyle({ color: 'blue' });\n    const { properties } = event.target.options;\n    setselectedLocationState(properties);\n  };\n\n  const onLocationOut = (event) => {\n    event.target.setStyle({ color: 'green' });\n    setselectedLocationState(null);\n  };\n\n  return (\n    <CircleMarker\n      key={id}\n      center={{ lat: coordinates[0], lng: coordinates[1] }}\n      radius={6}\n      properties={{ coordinates, id, city }}\n      color={'green'}\n      onMouseOver={onLocationOver}\n      onMouseOut={onLocationOut}\n    ></CircleMarker>\n  );\n}\n","import faker from 'faker';\n\nexport const generateLocations = (count) =>\n  new Promise((resolve) =>\n    setTimeout(() => {\n      const places = [];\n      for (let i = 0; i < count; i++) {\n        const placeObject = {\n          id: i,\n          coordinates: [faker.address.latitude(), faker.address.longitude()],\n          city: faker.address.city(),\n        };\n\n        places.push(placeObject);\n      }\n\n      resolve(places);\n    }, 2000)\n  );\n","import { selector } from 'recoil';\nimport { locationCountState } from './atoms';\nimport { generateLocations } from '../service';\n\nexport const locationsQuery = selector({\n  key: 'locationsQuery',\n  get: async ({ get }) => {\n    try {\n      const places = await generateLocations(get(locationCountState));\n      return places;\n    } catch (error) {\n      throw error;\n    }\n  },\n});\n\n\n// Reach fetch places\nexport const locationsState = selector({\n  key: 'locationsState',\n  get: ({ get }) => {\n    const places = get(locationsQuery);\n    return places;\n  },\n});\n","import LocationList from './LocationList';\n\nexport default LocationList;\n","import React from 'react';\nimport Location from '../Location';\nimport { useRecoilValue } from 'recoil';\nimport { locationsQuery } from '../../recoil/selectors';\n\nexport default function LocationList() {\n  const locations = useRecoilValue(locationsQuery);\n\n  return locations.map((location) => <Location key={location.id} {...location}></Location>);\n}\n","import Loader from './Loading';\n\nexport default Loader;\n","import React from 'react';\nimport RotateLoader from 'react-spinners/RotateLoader';\nimport './Loading.scss';\n\nexport default function Loading() {\n  return (\n    <div className='map-loader'>\n      <RotateLoader size={30} color={'#2f89cd'} />\n    </div>\n  );\n}\n","import MapView from './MapView';\n\nexport default MapView;\n","import React, { Suspense } from 'react';\nimport { Map, TileLayer } from 'react-leaflet';\nimport { useRecoilValue } from 'recoil';\nimport { mapCenterState, mapZoomState } from '../../recoil/atoms';\n\nimport LocationList from '../LocationList';\nimport Loading from '../Loading';\n\nexport default function MapView() {\n  const zoomState = useRecoilValue(mapZoomState);\n  const centerState = useRecoilValue(mapCenterState);\n\n  return (\n    <Map center={centerState} zoom={zoomState} style={{ height: '100vh', width: '100%' }}>\n      <TileLayer\n        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n      />\n      <Suspense fallback={<Loading />}>\n        <LocationList></LocationList>\n      </Suspense>\n    </Map>\n  );\n}\n","import React, { useState } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport { useRecoilValueLoadable, useSetRecoilState } from 'recoil';\nimport { locationsQuery } from '../../recoil/selectors';\nimport { mapCenterState, mapZoomState, selectedLocationState } from '../../recoil/atoms';\n\nimport './SearchLocaton.scss';\n\nconst theme = {\n  container: {\n    position: 'relative',\n  },\n  input: {\n    width: 240,\n    height: 25,\n    padding: '10px 20px',\n    fontWeight: 300,\n    fontSize: 16,\n    border: '2px solid #2f89cd',\n    borderTopLeftRadius: 20,\n    borderTopRightRadius: 20,\n    borderBottomLeftRadius: 20,\n    borderBottomRightRadius: 20,\n  },\n  inputFocused: {\n    outline: 'none',\n  },\n  inputOpen: {\n    borderBottomLeftRadius: 0,\n    borderBottomRightRadius: 0,\n  },\n  suggestionsContainer: {\n    display: 'none',\n  },\n  suggestionsContainerOpen: {\n    display: 'block',\n    maxHeight: 145,\n    overflow: 'auto',\n    position: 'absolute',\n    top: 45,\n    width: 280,\n    border: '1px solid #aaa',\n    backgroundColor: '#fff',\n    fontWeight: 300,\n    fontSize: 16,\n    borderWidth: 2,\n    borderColor: '#2f89cd',\n    borderTop: 'none',\n    borderBottomLeftRadius: 20,\n    borderBottomRightRadius: 20,\n    zIndex: 2,\n  },\n  suggestionsList: {\n    margin: 0,\n    padding: 0,\n    listStyleType: 'none',\n  },\n  suggestion: {\n    cursor: 'pointer',\n    padding: '10px 20px',\n  },\n  suggestionHighlighted: {\n    backgroundColor: '#ddd',\n  },\n};\n\nexport default function SearchLocation() {\n  const { state, contents } = useRecoilValueLoadable(locationsQuery);\n  const [value, setValue] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const setZoomState = useSetRecoilState(mapZoomState);\n  const setCenterState = useSetRecoilState(mapCenterState);\n  const setselectedLocation = useSetRecoilState(selectedLocationState);\n\n  const renderSuggestion = (suggestion) => <div>{suggestion.city}</div>;\n\n  const onValueChange = (event, { newValue }) => {\n    // Zoom out to default when user remove value after selected\n    setValue(newValue);\n    if (newValue === '') {\n      setZoomState(2);\n      setselectedLocation(null);\n    }\n  };\n  const onSuggestionSelected = (event, { suggestion, suggestionValue, suggestionIndex, sectionIndex, method }) => {\n    setZoomState(10);\n    setCenterState(suggestion.coordinates);\n    setselectedLocation(suggestion);\n  };\n  const inputProps = {\n    placeholder: 'Search for fake city',\n    value,\n    onChange: onValueChange,\n  };\n\n  const onSuggestionsFetchRequested = ({ value }) => {\n    setSuggestions(getSuggestions(value));\n  };\n\n  const getSuggestionValue = (suggestion) => suggestion.city;\n\n  const onSuggestionsClearRequested = () => {\n    setSuggestions([]);\n  };\n\n  const getSuggestions = (value) => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    return inputLength === 0 ? [] : contents.filter((content) => content.city.toLowerCase().slice(0, inputLength) === inputValue);\n  };\n\n  return state === 'hasValue' ? (\n    <div className='search-location'>\n      <Autosuggest\n        suggestions={suggestions}\n        theme={theme}\n        renderSuggestion={renderSuggestion}\n        onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n        onSuggestionSelected={onSuggestionSelected}\n        onSuggestionsClearRequested={onSuggestionsClearRequested}\n        getSuggestionValue={getSuggestionValue}\n        inputProps={inputProps}\n      ></Autosuggest>\n    </div>\n  ) : null;\n}\n","import SearchLocation from './SearchLocation';\n\nexport default SearchLocation;\n","import CurrentCity from './CurrentCity';\n\nexport default CurrentCity;\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { selectedLocationState } from '../../recoil/atoms';\n\nimport './CurrentCity.scss';\n\nexport default function CurrentCity() {\n  const location = useRecoilValue(selectedLocationState);\n\n  return (\n    <div className='coordinates-box'>\n      <span className='coordinates-box-value'> {location ? location.city : ''}</span>\n    </div>\n  );\n}\n","import React from 'react';\nimport Select from 'react-select';\nimport { useSetRecoilState } from 'recoil';\nimport { locationCountState } from '../../recoil/atoms';\nimport './SelectLocationCount.scss'\n\nconst LOCATION_COUNT_OPTIONS = [\n  { value: 10, label: '10' },\n  { value: 100, label: '100' },\n  { value: 500, label: '500' },\n  { value: 1000, label: '1000' },\n  { value: 3000, label: '3000' },\n  { value: 5000, label: '5000' },\n];\n\nexport default function SelectPlaceCount() {\n  const setNumberOfLocation = useSetRecoilState(locationCountState);\n\n  const onSelectPlacesCount = (event) => {\n    const {\n      value,\n    } = event;\n    setNumberOfLocation(value);\n  };\n\n  return (\n    <div className='location-count-select'>\n      <Select options={LOCATION_COUNT_OPTIONS} onChange={onSelectPlacesCount} defaultValue={LOCATION_COUNT_OPTIONS[3]}/>\n    </div>\n  );\n}\n","import SelectLocationCount from './SelectLocationCount';\n\nexport default SelectLocationCount;\n","import React, { Suspense } from 'react';\nimport { RecoilRoot } from 'recoil';\nimport MapView from './components/MapView';\nimport SearchLocation from './components/SearchLocation';\nimport CurrentCity from './components/CurrentCity';\nimport SelectLocationCount from './components/SelectLocationCount';\n\nimport 'leaflet/dist/leaflet.css';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <RecoilRoot>\n      <div className='App'>\n        <SelectLocationCount></SelectLocationCount>\n        <MapView></MapView>\n        <Suspense fallback={''}>\n          <SearchLocation></SearchLocation>\n        </Suspense>\n\n        <CurrentCity></CurrentCity>\n      </div>\n    </RecoilRoot>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}